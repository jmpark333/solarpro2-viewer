[
  {
    "role": "user",
    "content": "Caesar's Cipher\nJulius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher (check Resources tab for more info) shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.\n\nCreate a function that takes a string s (text to be encrypted) and an integer k (the rotation factor). It should return an encrypted string.\n\nExamples\ncaesarCipher(\"middle-Outz\", 2) ➞ \"okffng-Qwvb\"\n\n// m -> o\n// i -> k\n// d -> f\n// d -> f\n// l -> n\n// e -> g\n// -    -\n// O -> Q\n// u -> w\n// t -> v\n// z -> b\n\ncaesarCipher(\"Always-Look-on-the-Bright-Side-of-Life\", 5)\n➞ \"Fqbfdx-Qttp-ts-ymj-Gwnlmy-Xnij-tk-Qnkj\"\n\ncaesarCipher(\"A friend in need is a friend indeed\", 20)\n➞ \"U zlcyhx ch hyyx cm u zlcyhx chxyyx\"\nNotes\nAll test input will be a valid ASCII string.\n\nin JavaScript"
  },
  {
    "role": "assistant",
    "content": "To solve the Caesar Cipher problem, we need to implement a function that shifts each letter in a given string by a specified number of positions in the alphabet. If the shift goes past the end of the alphabet, it should wrap around to the beginning. Non-alphabetic characters should remain unchanged.\n\n### Approach\n1. **Normalize the Shift Value**: Since shifting by 26 positions (or any multiple of 26) results in the same letter, we can reduce the shift value `k` modulo 26 to handle large values efficiently. This also ensures that negative shifts are converted into positive equivalents.\n2. **Character Transformation**: For each character in the input string:\n   - If the character is a letter (either uppercase or lowercase), determine its position in the alphabet, apply the shift, and wrap around if necessary.\n   - If the character is not a letter, leave it unchanged.\n3. **Case Handling**: Separately handle uppercase and lowercase letters to maintain their case after transformation.\n\n### Solution Code\n```javascript\nfunction caesarCipher(s, k) {\n    // Normalize the shift value to be within 0-25\n    k = (k % 26 + 26) % 26;\n    \n    let result = '';\n    for (let c of s) {\n        if (/[a-zA-Z]/.test(c)) {\n            const code = c.charCodeAt(0);\n            if (c >= 'a' && c <= 'z') {\n                // Handle lowercase letters\n                const shifted = ((code - 'a'.charCodeAt(0) + k) % 26) + 'a'.charCodeAt(0);\n                result += String.fromCharCode(shifted);\n            } else {\n                // Handle uppercase letters\n                const shifted = ((code - 'A'.charCodeAt(0) + k) % 26) + 'A'.charCodeAt(0);\n                result += String.fromCharCode(shifted);\n            }\n        } else {\n            // Non-alphabetic characters remain unchanged\n            result += c;\n        }\n    }\n    return result;\n}\n\n// Test cases\nconsole.log(caesarCipher(\"middle-Outz\", 2)); // \"okffng-Qwvb\"\nconsole.log(caesarCipher(\"Always-Look-on-the-Bright-Side-of-Life\", 5)); // \"Fqbfdx-Qttp-ts-ymj-Gwnlmy-Xnij-tk-Qnkj\"\nconsole.log(caesarCipher(\"A friend in need is a friend indeed\", 20)); // \"U zlcyhx ch hyyx cm u zlcyhx chxyyx\"\n```\n\n### Explanation\n1. **Normalization of Shift Value**: The shift value `k` is adjusted using `(k % 26 + 26) % 26` to ensure it is within the range 0-25. This handles both positive and negative values of `k`.\n2. **Character Transformation**:\n   - For lowercase letters, the ASCII value is adjusted by subtracting `'a'` (97), applying the shift, taking modulo 26 to wrap around, and then adding back `'a'`.\n   - For uppercase letters, a similar process is followed using `'A'` (65) as the base.\n3. **Non-Alphabetic Characters**: These are directly appended to the result without any changes.\n\nThis approach efficiently handles all edge cases, including large shift values and non-alphabetic characters, ensuring the correct transformation of the input string according to the Caesar Cipher rules."
  }
]